name: Frontend Selenium Tests

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    # Paso 1: Clonar el repositorio del frontend
    - name: Check out frontend repository
      uses: actions/checkout@v3

    # Paso 2: Configurar Node.js
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    # Paso 3: Instalar dependencias del frontend
    - name: Install frontend dependencies
      run: npm install

    # Paso 4: Clonar el repositorio privado del backend
    - name: Clone backend repository
      run: git clone https://$GITHUB_ACTOR:${{ secrets.GH_TOKEN }}@github.com/Edwinguty2/backTechShop.git backend

    # Paso 5: Instalar Java 17 con distribución AdoptOpenJDK
    - name: Set up Java 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'  # Especificar distribución

    # Paso 6: Dar permisos de ejecución al archivo gradlew
    - name: Give execute permission to gradlew
      run: chmod +x backend/gradlew

    # Paso 7: Instalar dependencias del backend con Gradle
    - name: Install backend dependencies with Gradle
      run: |
        cd backend
        ./gradlew build  # Instalar las dependencias de Gradle (build)
    
    # Paso 8: Instalar wait-on
    - name: Install wait-on
      run: npm install -g wait-on  # Instalar wait-on para poder esperar los servicios

     # Paso: Verificar puertos libres
    - name: Check for free ports
      run: |
        echo "Checking for free ports..."
        # Buscar puertos libres en el rango de 8080 a 8090
        for port in {8080..8090}; do
          if ! lsof -i :$port; then
            echo "Port $port is free"
          else
            echo "Port $port is in use"
          fi
        done

    # Paso 10: Iniciar el backend usando Gradle
    - name: Start backend
      run: |
        cd backend
        ./gradlew bootRun &  # Iniciar el backend en segundo plano

    # Paso 11: Esperar a que el backend esté listo
    - name: Wait for backend to be ready
      run: npx wait-on http://localhost:8084  # Esperar a que el backend esté disponible

    # Paso 12: Iniciar el frontend
    - name: Start frontend
      run: |
        npm install -g serve
        serve -s build -l 3000 &  # Iniciar el frontend en segundo plano
        echo "Waiting for frontend to start..."
        npx wait-on http://localhost:3000  # Esperar a que el frontend esté disponible

    # Paso 13: Ejecutar pruebas Selenium
    - name: Run Selenium GUI Tests
      env:
        BASE_URL: "http://localhost:3000"
      run: npm run test:gui
